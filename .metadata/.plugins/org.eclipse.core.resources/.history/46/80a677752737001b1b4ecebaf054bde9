package DistributedFileApp;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;


public class FileManager {

	//hashmap keeps track of how many clients are reading each file
	static HashMap<String, Integer> clientsReading = new HashMap<String, Integer>();
	
	static synchronized String getRealFileName(DistributedFileImpl server, String inputFileName) {
		
		String realFileName = addVersionNumberToFileName(inputFileName);
//		String path = System.getProperty("user.home") + "/files/" + realFileName;
//		
//		boolean fileExists = (new File(path)).exists();
	
		clientsReading.put(realFileName, clientsReading.get(realFileName) + 1);
		return realFileName;	
		
//		if (!fileExists) {
//			String fileString = server.connectToAnotherServer(realFileName);
//			
//			createFile(realFileName);
//			clientsReading.put(realFileName, 1);
//			
//			return fileString;
//
//			return realFileName;
//		} else {
//			
//			//if file exists already, add new reader to hashmap and return name
//			clientsReading.put(realFileName, clientsReading.get(realFileName) + 1);
//			return realFileName;			
//		}
	}
	
	public static String retrieveFromRemoteAndGetFileName(DistributedFileImpl distributedFileImpl, String fileName) {
		String realFileName = addVersionNumberToFileName(fileName);

		String fileString = distributedFileImpl.connectToAnotherServer(realFileName); //get file contents from remote server
		
		createFile(fileString); //create it so client can open
		clientsReading.put(realFileName, 1); //add to hashmap
		
		return realFileName;
	}
	
	private static String addVersionNumberToFileName(String inputFileName) {
		return inputFileName;//change this when we do version numbers
	}

	static void doneReading(String inputFileName) {
		//decrement number of clients reading in hashmap
		String realFileName = addVersionNumberToFileName(inputFileName);
		clientsReading.put(realFileName, clientsReading.get(realFileName) - 1);
		
		//if no more readers, delete file and remove hashmap entry
		if (clientsReading.get(realFileName) == 0) {
			clientsReading.remove(realFileName);
			
			//delete the local file
			File fileToDelete = new File(realFileName);
			fileToDelete.delete();
		}		
	}

	public static HashMap<String, Integer> getClientsReading() {
		return clientsReading;
	}

	public static boolean fileExists(String fileName) {
		String realFileName = addVersionNumberToFileName(fileName);
		String path = System.getProperty("user.home") + "/files/" + realFileName;
		
		boolean fileExists = (new File(path)).exists();
		return fileExists;
	}

	private static void createFile(String realFileName) {
		File file = new File(realFileName);
		try {
			file.createNewFile();
		} catch (IOException e) {
			System.out.println("unable to create file");
			e.printStackTrace();
		}
	}
	


}
