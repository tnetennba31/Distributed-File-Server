package DistributedFileApp;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;

public class FileManager {

	// hashmap keeps track of how many clients are reading each file
	static HashMap<String, Integer> clientsReading = new HashMap<String, Integer>();
	static HashMap<String, Integer> fileVersionNumbers = new HashMap<String, Integer>();

	public static boolean fileExistsLocally(String fileName) {
		String path = System.getProperty("user.home") + "/files/" + fileName;
		return (new File(path)).exists();
	}

	public static boolean fileExistsRemotely(String fileName, DistributedFileImpl server) {
		String fileContents = server.searchOtherServers(fileName);
		if (fileContents.equalsIgnoreCase("File Not Found")) {
			return false;
		} else {
			copyToLocal(fileName, fileContents);
			return true;
		}
	}

	private static void copyToLocal(String fileName, String fileContents) {
		try {
			File file = new File(System.getProperty("user.home") + "/files/" + fileName);
			FileWriter fw = new FileWriter(file);
			fw.write(fileContents);
			fw.close();
		} catch (IOException e) {
			System.out.println("Unable to create file");
			e.printStackTrace();
		}
	}

	public static void addClientReading(String fileName, boolean isNewFile) {
		if (isNewFile) {
			clientsReading.put(fileName, 1); // add to hashmap
			System.out.println("reader adder");
		} else {
			clientsReading.put(fileName, clientsReading.get(fileName) + 1);
			System.out.println("number reading:" + clientsReading.get(fileName));

		}
	}

	static void doneReading(String inputFileName) {
		// decrement number of clients reading in hashmap
		clientsReading.put(inputFileName, clientsReading.get(inputFileName) - 1);
		System.out.println(
				"number of readers reading " + inputFileName + " is now: " + clientsReading.get(inputFileName));

		// if no more readers, delete file and remove hashmap entry
		if (clientsReading.get(inputFileName) == 0 && !NativeFileReader.isNativeFile(inputFileName)) {
			clientsReading.remove(inputFileName);
			System.out.println("no one is reading " + inputFileName + " so it was deleted.");

			// delete the local file
			File fileToDelete = new File(inputFileName);
			fileToDelete.delete();
		}
	}

	public static HashMap<String, Integer> getClientsReading() {
		return clientsReading;
	}

//	private static void createFile(String realFileName) {
//		File file = new File(realFileName);
//		try {
//			file.createNewFile();
//		} catch (IOException e) {
//			System.out.println("unable to create file");
//			e.printStackTrace();
//		}
//	}

}
