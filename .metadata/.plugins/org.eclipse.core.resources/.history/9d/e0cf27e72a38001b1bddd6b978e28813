package DistributedFileApp;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

import org.omg.CORBA.ORB;
import org.omg.CosNaming.NameComponent;
import org.omg.CosNaming.NamingContextExt;
import org.omg.CosNaming.NamingContextExtHelper;
import org.omg.PortableServer.POA;
import org.omg.PortableServer.POAHelper;

class DistributedFileImpl extends DistributedFilePOA {
	private ORB orb;

	public void setORB(ORB orb_val) {
		orb = orb_val;
	}

	public String csOpenRead(String fileName) {
		boolean newFile;
		if (LockedFilesManager.isLockedFile(fileName)) {
			System.out.println("File is being written to and cannot be opened at this time.");
			return "Could not lock this file";
		} else {
			if (FileManager.clientsReading.containsKey(fileName)) {
				newFile = false;
			} else {
				newFile = true;
			}
			if (FileManager.fileExistsLocally(fileName) || FileManager.fileExistsRemotely(fileName, this)) {
				FileManager.addClientReading(fileName, newFile);
				return fileName;
			} else { // doesn't exist anywhere
				return "File Not Found";
			}
		}
	}

	public boolean csCloseRead(String fileName) {
		FileManager.doneReading(fileName);
		if (FileManager.clientsReading.get(fileName) == 0 && !NativeFileReader.isNativeFile(fileName)) {
			FileManager.deleteFile(fileName);
		}
		return true;
	}

	public String csOpenWrite(String fileName) {
		if (FileManager.fileExistsLocally(fileName)) {
			if (getAcks(fileName, this)) {
				return fileName; // tell everyone to lock
			} else {
				return "Could not lock this file";
			}
		} else {
			return FileManager.findForWriting(fileName, this); // finds it or says fake news
		}
	}

	public boolean csCloseWrite(String fileName) {
		if (!NativeFileReader.isNativeFile(fileName)) {
			NativeFileReader.addToListOfNativeFiles(fileName);
		}
		for (DistributedFile s : getAllServerImpls()) {
			s.ssCloseWrite(fileName);
		}
		return true;
	}

	public String ssOpenRead(String fileName) {
		String path = System.getProperty("user.home") + "/files/" + fileName;
		try {
			Scanner s = new Scanner(new File(path));
			StringBuffer contents = new StringBuffer("");
			while (s.hasNext()) {
				contents.append(s.nextLine() + "\n");
			}

			s.close();
			return contents.toString();
		} catch (FileNotFoundException e) {
			return "File Not Found";
		}
	}

	public boolean ssCloseRead(String fileName) {
		return true;
	} // fake news, remove if feasible

	public String ssOpenWrite(String fileName) {
		File f = new File(System.getProperty("user.home") + "/files/" + fileName);
		if (f.exists()) {
			if (getAcks(fileName, this)) {
				Scanner s = null;
				try {
					s = new Scanner(f);
				} catch (FileNotFoundException e) {
					System.out.println("idk dude we got a file not found exception in ssOpenWrite");
				}
				StringBuffer contents = new StringBuffer("");
				while (s.hasNext()) {
					contents.append(s.nextLine() + "\n");
				}
				s.close();
				return contents.toString();
			} else {
				return "Could not lock this file";
			}
		} else {
			return "File Not Found";
		}
	}

	public boolean ssLockWrite(String fileName) {
		if (LockedFilesManager.isLockedFile(fileName)) {
			return false;
		} else {
			LockedFilesManager.addToLockedList(fileName);
			return true;
		}
	}

	public String ssCloseWrite(String fileName) {
		System.out.println("Lets read a lock");
		if (FileManager.lockedFiles.contains(fileName)) {
			FileManager.lockedFiles.remove(fileName);
		}
		if (NativeFileReader.isNativeFile(fileName)) {
			NativeFileReader.removeFromListOfNativeFiles(fileName);
			if (FileManager.clientsReading.get(fileName) == 0) {
				FileManager.deleteFile(fileName);
			}
		}
		return fileName;
	}

	/**
	 * Method to find a file far away and return it for reading
	 * 
	 * @param fileName name of file
	 * @return contents of file or file not found string
	 */
	public String searchOtherServers(String fileName) {
		ConfigReader.resetReader();
		String nextServer = ConfigReader.getNextAddress();
		while (nextServer != null) {

			String address[] = { "-ORBInitialHost", nextServer, "-ORBInitialPort", "1058", "-port", "1059" };
			// create and initialize the ORB
			ORB orb = ORB.init(address, null);
			try {
				org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
				NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
				DistributedFile serverToServerImpl = DistributedFileHelper.narrow(ncRef.resolve_str("DistributedFile"));

				System.out.println("By Jove, we've connected to another server...");

				String fileContents = serverToServerImpl.ssOpenRead(fileName);

				if (!fileContents.equalsIgnoreCase("File Not Found")) {
					return fileContents;
				} else {
					System.out.println("Not found on " + nextServer + ", trying again.");
					nextServer = ConfigReader.getNextAddress();
				}
			} catch (Exception e) {
				System.out.println("Server at " + nextServer
						+ " is not available right now.  Please leave a message after the beep.");
				nextServer = ConfigReader.getNextAddress();
			}
		}

		return "File Not Found";
	}

	/**
	 * Gets all server impls so we can tell them to lock files for write
	 * 
	 * @return all da impls
	 */
	public ArrayList<DistributedFile> getAllServerImpls() {
		ConfigReader.resetReader();
		ArrayList<DistributedFile> servers = new ArrayList<>();
		String nextServer = ConfigReader.getNextAddress();
		while (nextServer != null) {
			String address[] = { "-ORBInitialHost", nextServer, "-ORBInitialPort", "1058", "-port", "1059" };
			// create and initialize the ORB
			ORB orb = ORB.init(address, null);
			try {
				org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
				NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
				servers.add(DistributedFileHelper.narrow(ncRef.resolve_str("DistributedFile")));
			} catch (Exception e) {
				System.out.println("Server at " + nextServer
						+ " is not available right now.  Please leave a message after the beep.");
				nextServer = ConfigReader.getNextAddress();
			}
			nextServer = ConfigReader.getNextAddress();
		}
		return servers;
	}

	/**
	 * Have other servers acknowledge a file is being locked for write
	 * 
	 * @param fileName
	 * @param server
	 * @return true if all ack, false if anyone nacks
	 */
	public boolean getAcks(String fileName, DistributedFileImpl server) {
		ArrayList<DistributedFile> servers = server.getAllServerImpls();
		for (DistributedFile s : servers) {
			boolean lock = s.ssLockWrite(fileName);
			if (lock == false) {
				System.out.println("Couldn't lock bro");
			}
			//if (!s.ssLockWrite(fileName)) {
			//	return false;
			//}
		}
		System.out.println("Got all those locks bro");
		return true;
	}

	// implement shutdown() method
	public void shutdown() {
		orb.shutdown(false);
	}

}

/**
 * This is the class that runs on the server
 * 
 * @author merlin
 *
 */
public class DistributedFileServer {

	/**
	 * @param args ignored
	 */
	public static void main(String args[]) {
		try {
			String address[] = { "-ORBInitialHost", "localhost", "-ORBInitialPort", "1058", "-port", "1059" };
			// create and initialize the ORB
			ORB orb = ORB.init(address, null);

			// get reference to rootpoa & activate the POAManager
			POA rootpoa = POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
			rootpoa.the_POAManager().activate();

			// create servant and register it with the ORB
			DistributedFileImpl distributedFileImpl = new DistributedFileImpl();
			distributedFileImpl.setORB(orb);

			// get object reference from the servant
			org.omg.CORBA.Object ref = rootpoa.servant_to_reference(distributedFileImpl);
			DistributedFile href = DistributedFileHelper.narrow(ref);

			// get the root naming context
			// NameService invokes the name service
			org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
			// Use NamingContextExt which is part of the Interoperable
			// Naming Service (INS) specification.
			NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);

			// bind the Object Reference in Naming
			String name = "DistributedFile";
			NameComponent path[] = ncRef.to_name(name);
			ncRef.rebind(path, href);

			System.out.println("DistributedFileServer ready and waiting ...");

			// wait for invocations from clients
			orb.run();
		}

		catch (Exception e) {
			System.err.println("ERROR: " + e);
			e.printStackTrace(System.out);
		}

		System.out.println("DistributedFileServer Exiting ...");

	}
}
